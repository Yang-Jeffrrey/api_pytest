{"name": "集团分配物流公司", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_getMaterials.TestProductModule object at 0x0000021019FF7B80>\nbase_info = {'api_name': '集团分配物流公司', 'cookies': '${get_extract_data(Cookie)}', 'header': {'Content-Type': 'application/json;charset=UTF-8'}, 'method': 'post', ...}\ntestcase = {'json': {'orderId': 'DD20231102202112317', 'orgId': '4140913758110176843'}}\n\n    @allure.story(next(c_id) + \"集团分配物流公司\")\n    @pytest.mark.run(order=4)\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml('./testcases/logistic/AssignOrder.yaml'))\n    def test_assign_order_material(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcases\\logistic\\test_getMaterials.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:113: in specification_yaml\n    raise e\nbase\\apiutil.py:107: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertion.Assertions object at 0x000002101A0C85E0>\nexpected = [{'contains': {'message': '操作成功'}}]\nresponse = {'code': 90000, 'message': '订单id或组织id不存在'}, status_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言最终封装方法\n        :param expected: 预期结果，也就是yaml文件里面的validation字段的值\n        :param response: 接口的实际返回结果\n        :param status_code: 接口的实际返回状态码\n        :return:\n        \"\"\"\n        # 0 表示表示断言成功，非0表示接口测试失败\n        all_flag = 0\n        try:\n            logs.info(f\"yaml文件的预期结果:{expected}\")\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == 'contains':\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'eq':\n                        flag = self.equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    elif key == 'ne':\n                        flag = self.no_equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持{key}这种断言方式!\")\n            # assert all_flag == 0\n            # logs.info(\"测试成功\")\n        except Exception as e:\n            logs.error(\"请检查断言字段是否包含在接口的返回值中\")\n            logs.error(f\"异常信息:{e}\")\n            raise e\n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\nE           AssertionError\n\ncommon\\assertion.py:134: AssertionError"}, "attachments": [{"name": "接口名称集团分配物流公司", "source": "43bc5218-e5f0-4078-8f2b-bbf27ba8034d-attachment.txt", "type": "text/plain"}, {"name": "接口名称http://127.0.0.1:8787/api/order/pc/order/assign", "source": "dde3d354-6ba2-4280-8f23-4600678560ae-attachment.txt", "type": "text/plain"}, {"name": "请求方式post", "source": "0f259d48-56d8-42fc-a86d-12648914feb9-attachment.txt", "type": "text/plain"}, {"name": "请求头{'Content-Type': 'application/json;charset=UTF-8'}", "source": "e8876cd0-5084-4089-8aa3-6745a5fadb21-attachment.txt", "type": "text/plain"}, {"name": "cookie", "source": "aa8eb9e2-f472-4fb6-bc90-d4fe2b622e37-attachment.txt", "type": "text/plain"}, {"name": "测试用例名称集团分配物流公司", "source": "e8211ea6-66c7-42ae-bfae-50bfd7e71bb6-attachment.txt", "type": "text/plain"}, {"name": "预期结果", "source": "e1a27440-eb48-473f-a736-dac16c1d0333-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "7a01f941-5df0-4c5c-83e2-738b1569c671-attachment.txt", "type": "text/plain"}, {"name": "接口返回结果{\"code\":90000,\"message\":\"订单id或组织id不存在\"}\n", "source": "7a7a21a9-a1fd-42ff-97b9-76012c5b5626-attachment.txt", "type": "text/plain"}, {"name": "响应代码断言结果：失败", "source": "20c66ff0-499c-4e12-90dc-9a68bcf09dbe-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "55d56dc5-8fed-4b0b-85bf-651928333f3e-attachment.txt", "type": "text/plain"}], "start": 1698958756690, "stop": 1698958756875, "uuid": "e1acc5f7-0535-4423-b20c-eb704f2d6100", "historyId": "fc3a665880417a1ac7e78359132dc50e", "testCaseId": "fc3a665880417a1ac7e78359132dc50e", "fullName": "testcases.logistic.test_getMaterials.TestProductModule#test_assign_order_material", "labels": [{"name": "story", "value": "04_集团分配物流公司"}, {"name": "feature", "value": "M01_智慧物流项目"}, {"name": "tag", "value": "run(order=4)"}, {"name": "parentSuite", "value": "testcases.logistic"}, {"name": "suite", "value": "test_getMaterials"}, {"name": "subSuite", "value": "TestProductModule"}, {"name": "host", "value": "DESKTOP-N8O9671"}, {"name": "thread", "value": "9776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.logistic.test_getMaterials"}]}